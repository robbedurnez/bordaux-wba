// <auto-generated />
using System;
using BordauxWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BordauxWebApp.Migrations
{
    [DbContext(typeof(BordauxIdentityContext))]
    [Migration("20200105193347_Initial_Migration")]
    partial class Initial_Migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BordauxWebApp.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(42);

                    b.Property<string>("LastName")
                        .HasMaxLength(42);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfilePicturePath");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "7144ac35-8a22-483b-b805-7833b10acf77",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7f0291d-1e3a-4d93-8727-29e8e4810952",
                            Email = "dwight.senaeve@student.howest.be",
                            EmailConfirmed = false,
                            FirstName = "Dwight",
                            LastName = "Senaeve",
                            LockoutEnabled = false,
                            NormalizedEmail = "DWIGHT.SENAEVE@STUDENT.HOWEST.BE",
                            NormalizedUserName = "DWIGHT.SENAEVE@STUDENT.HOWEST.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEAi4rfs9sPrS8M9wO7slUrkLvPzyFO9obw+sAaL2g78SskHjhnfjelfmOGlFrjrapQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "{784f022e-3f70-4434-a40b-8b0a53c3f8e3}",
                            TwoFactorEnabled = false,
                            UserName = "dwight.senaeve@student.howest.be"
                        },
                        new
                        {
                            Id = "cc3b6957-0115-4c20-a363-bb86b936283e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b40779bb-8f2d-4b96-bc87-92fb2167c53c",
                            Email = "robbe.durnez@student.howest.be",
                            EmailConfirmed = false,
                            FirstName = "Robbe",
                            LastName = "Durnez",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROBBE.DURNEZ@STUDENT.HOWEST.BE",
                            NormalizedUserName = "ROBBE.DURNEZ@STUDENT.HOWEST.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEAYORwilWFwSj7Fcw3zcR3p5MzsI7EVv7gxP3edsgHjxoK/lKF/9+1uWxQMhacL68w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "{49ec597d-8591-429e-9ad5-c5566a83c4f5}",
                            TwoFactorEnabled = false,
                            UserName = "robbe.durnez@student.howest.be"
                        },
                        new
                        {
                            Id = "58c580a9-60ef-4c07-89ba-99abbab41711",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7935b91a-4c7f-4afa-b04f-7c27d187213b",
                            Email = "john.doe@student.howest.be",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@STUDENT.HOWEST.BE",
                            NormalizedUserName = "JOHN.DOE@STUDENT.HOWEST.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEGDegBGAe9mwcyr9XvTixH2zbK5xyMk1bXaPCGbDCw9hzklaQb7P8rpYIGFsn78PeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "{76a991cd-a674-429e-b450-8dc47db3d9fd}",
                            TwoFactorEnabled = false,
                            UserName = "john.doe@student.howest.be"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1cc00f5c-d420-4e9c-aebd-ec0d24c91f00",
                            ConcurrencyStamp = "6bda60a7-fa2e-489d-b83c-54a0bc82db7a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "292db4c8-f3fc-484e-960a-56240fbea9cb",
                            ConcurrencyStamp = "d32f2391-3574-4426-ad86-2d1e6d834add",
                            Name = "Promotor",
                            NormalizedName = "PROMOTOR"
                        },
                        new
                        {
                            Id = "0fd7809b-dbfe-4138-b11c-325c133ad9cc",
                            ConcurrencyStamp = "062f9bfc-509f-40ee-be50-e9708fa9000a",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "7144ac35-8a22-483b-b805-7833b10acf77",
                            RoleId = "1cc00f5c-d420-4e9c-aebd-ec0d24c91f00"
                        },
                        new
                        {
                            UserId = "cc3b6957-0115-4c20-a363-bb86b936283e",
                            RoleId = "1cc00f5c-d420-4e9c-aebd-ec0d24c91f00"
                        },
                        new
                        {
                            UserId = "58c580a9-60ef-4c07-89ba-99abbab41711",
                            RoleId = "0fd7809b-dbfe-4138-b11c-325c133ad9cc"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BordauxWebApp.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BordauxWebApp.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BordauxWebApp.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BordauxWebApp.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
